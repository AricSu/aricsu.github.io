import{_ as a,c as r,a4 as s,o as n}from"./chunks/framework.C3yiUNUH.js";const u=JSON.parse('{"title":"What problem does Paxos reslove","description":"","frontmatter":{},"headers":[],"relativePath":"en/work/tidb/TiDB-Principle/Paper Reading/PaperPaxos Note.md","filePath":"en/work/tidb/TiDB-Principle/Paper Reading/PaperPaxos Note.md"}'),t={name:"en/work/tidb/TiDB-Principle/Paper Reading/PaperPaxos Note.md"};function p(o,e,l,i,m,h){return n(),r("div",null,e[0]||(e[0]=[s(`<h1 id="what-problem-does-paxos-reslove" tabindex="-1">What problem does Paxos reslove <a class="header-anchor" href="#what-problem-does-paxos-reslove" aria-label="Permalink to &quot;What problem does Paxos reslove&quot;">​</a></h1><p>Paxos算法常被引用于分布式相关文章，借助针对希腊城邦议会立法的场景，主要探讨在人员不断变化等不确定性因素的前提下如何基于一定的规则达成共识方法。作者借用对场景的探讨隐喻分布式计算机系统的解决办法，以较易于理解的形式阐述、并验证了该算法的正确性。</p><h2 id="《paxos-made-simple》简述" tabindex="-1">《Paxos Made Simple》简述 <a class="header-anchor" href="#《paxos-made-simple》简述" aria-label="Permalink to &quot;《Paxos Made Simple》简述&quot;">​</a></h2><ul><li><strong>文章由来</strong></li></ul><p>Paxos算法的Paper原文为《The Part-Time Parliament》，但因作者lamport采用隐喻的方式表达及算法本身的复杂性，使得该算法难以被学习者接受。因此，作者推出了《Paxos Made Simple》帮助学习者们理解和学习改算法。</p><ul><li><strong>文章结构</strong></li></ul><p>《Paxos Made Simple》文章大致分为Introduction、The Consensus Algorithm、The Implementation三个部分，一致性算法部分可谓中重工之重。该部分，主要讲解了存在的问题、传播被promise的值，处理、具体的实现。</p><ul><li><strong>拜占庭容错共识算法的两个指标</strong></li></ul><p>安全性(safety)：safety means nothing bad happens. （安全性意味着多状态机的最终一致性。） 活性(liveness)：liveness means that something good eventually happens. （活性意味着message可以延迟到达，但绝不能丢失。）</p><p>为确保安全性，还需满足如下要求： （1） 每次propose，仅1个值被propose； （2） 每次propose，仅1个值被promise； （3） 每次propose，进程从不promise比自己小的值，除非等于自己的值；</p><p>为确保活性，还需满足如下要求：</p><p>2312312312312</p><p>作者理论的前提是，不出现拜占庭容错误，既：不丢失活性；</p><ul><li><strong>Proposal的过程</strong></li></ul><p>P1条件：acceptor必须接受第一次被propose的值；</p><p>P2条件：如果accepter已promise过的value，那个被promise的更大number的proposal携带的value是同一个。</p><p>P2a条件：如果accepter已promise过的value，那个被promise的更大number的proposal携带的value是同一个，且被所有acceptor所promise。（在满足P1和P2的前提下推导出P2a）</p><p>P2b条件：如果accepter已promise过的value，那个被promise的更大number的proposal携带的value是同一个，proposer不会发送比当前number小的proposal。（在既满足进展性，又满足P1条件的前提时，会出现活锁问题违背P2a条件，通过增强P2a的方式解决解决。）</p><p>P2c条件：对于任意的v和n，如果有value为v且number为n的proposal被分发，因为acceptor是所有acceptor中的大多数（简称：S），则可推断出当前的S中的values值，要么没有promise过任何小于n的value，要么当前S所promise过的是proposal中的最大number所携带的值。</p><p><strong>此处要插入时序图</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Phase 1. (a) A proposer selects a proposal number n and sends a prepare</span></span>
<span class="line"><span>request with number n to a majority of acceptors.</span></span>
<span class="line"><span>(b) If an acceptor receives a prepare request with number n greater</span></span>
<span class="line"><span>than that of any prepare request to which it has already responded,</span></span>
<span class="line"><span>then it responds to the request with a promise not to accept any more</span></span>
<span class="line"><span>proposals numbered less than n and with the highest-numbered proposal (if any) that it has accepted.</span></span>
<span class="line"><span>5</span></span>
<span class="line"><span>Phase 2. (a) If the proposer receives a response to its prepare requests</span></span>
<span class="line"><span>(numbered n) from a majority of acceptors, then it sends an accept</span></span>
<span class="line"><span>request to each of those acceptors for a proposal numbered n with a</span></span>
<span class="line"><span>value v, where v is the value of the highest-numbered proposal among</span></span>
<span class="line"><span>the responses, or is any value if the responses reported no proposals.</span></span>
<span class="line"><span>(b) If an acceptor receives an accept request for a proposal numbered</span></span>
<span class="line"><span>n, it accepts the proposal unless it has already responded to a prepare</span></span>
<span class="line"><span>request having a number greater than n.</span></span></code></pre></div><h3 id="活锁问题理解与处理" tabindex="-1">活锁问题理解与处理 <a class="header-anchor" href="#活锁问题理解与处理" aria-label="Permalink to &quot;活锁问题理解与处理&quot;">​</a></h3><h3 id="《the-part-time-parliament》简述" tabindex="-1">《The Part-Time Parliament》简述 <a class="header-anchor" href="#《the-part-time-parliament》简述" aria-label="Permalink to &quot;《The Part-Time Parliament》简述&quot;">​</a></h3><h3 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h3><p><a href="http://lamport.azurewebsites.net/pubs/pubs.html" target="_blank" rel="noreferrer"><em><strong>Leslie Lamport博客</strong></em></a><a href="https://courses.cs.washington.edu/courses/csep590/04wi/papers/lamport-part-time-parliament.pdf" target="_blank" rel="noreferrer"><em><strong>The Part-Time Parliament原文</strong></em></a><a href="https://lamport.azurewebsites.net/pubs/paxos-simple.pdf" target="_blank" rel="noreferrer"><em><strong>Paxos Made Simple原文</strong></em></a><a href="https://www.cnblogs.com/hzmark/p/The_Part-Time_Parliament.html" target="_blank" rel="noreferrer"><em><strong>The Part-Time Parliament译文</strong></em></a><a href="https://www.jianshu.com/p/67dd80555ba2" target="_blank" rel="noreferrer"><em><strong>Re-visiting of Paxos Made Simple译文</strong></em></a><a href="https://www.jianshu.com/p/21785016f412" target="_blank" rel="noreferrer"><em><strong>简书-孙如绿叶的拜占庭算法理解</strong></em></a><a href="https://zhuanlan.zhihu.com/p/111304281" target="_blank" rel="noreferrer"><em><strong>知乎-潇湘夜雨理解两阶段提交</strong></em></a><a href="https://zhuanlan.zhihu.com/p/91288179" target="_blank" rel="noreferrer"><em><strong>知乎-牛吃草raft协议理解</strong></em></a><a href="http://blog.itpub.net/9683969/viewspace-672920/" target="_blank" rel="noreferrer"><em><strong>itpub-Oracle行锁及mvcc实现原理</strong></em></a><a href="https://zhuanlan.zhihu.com/p/31727291" target="_blank" rel="noreferrer"><em><strong>知乎-祥光的文章(1)Paxos、Raft分布式一致性算法应用场景</strong></em></a><a href="https://zhuanlan.zhihu.com/p/31780743" target="_blank" rel="noreferrer"><em><strong>知乎-祥光的文章(2)Paxos算法详解</strong></em></a><a href="https://www.cnblogs.com/hzmark/p/The_Part-Time_Parliament.html" target="_blank" rel="noreferrer"><em><strong>博客园-杭州.Mark的文章</strong></em></a></p>`,25)]))}const d=a(t,[["render",p]]);export{u as __pageData,d as default};
