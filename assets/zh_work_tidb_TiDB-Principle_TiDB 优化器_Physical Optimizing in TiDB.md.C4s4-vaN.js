import{_ as e,c as a,o as s,a4 as o}from"./chunks/framework.svyMRVY3.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/work/tidb/TiDB-Principle/TiDB 优化器/Physical Optimizing in TiDB.md","filePath":"zh/work/tidb/TiDB-Principle/TiDB 优化器/Physical Optimizing in TiDB.md"}'),c={name:"zh/work/tidb/TiDB-Principle/TiDB 优化器/Physical Optimizing in TiDB.md"};function i(r,t,l,n,d,p){return s(),a("div",null,t[0]||(t[0]=[o(`<h2 id="first-of-all" tabindex="-1">First of all <a class="header-anchor" href="#first-of-all" aria-label="Permalink to &quot;First of all&quot;">​</a></h2><p>first of all, in psysical period, <a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/optimizer.go#L624" target="_blank" rel="noreferrer">preparePossibleProperties</a> will get all possible order properties(column fields), which is only used for join and aggregation. Like group by a,b,c, into one slice from different level childs.</p><h2 id="how-to-calculate-physical-plan" tabindex="-1">How to calculate physical plan <a class="header-anchor" href="#how-to-calculate-physical-plan" aria-label="Permalink to &quot;How to calculate physical plan&quot;">​</a></h2><ol><li><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/optimizer.go#L269" target="_blank" rel="noreferrer">DoOptimize</a> is the core connection from logicalOptimize to physicalOptimize, which optimizes a logical plan to a physical plan.</li><li>Function findBestTask ,in <a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/optimizer.go#L619" target="_blank" rel="noreferrer">physicalOptimize</a>, will find out the best tasks from logical plan, and converts the logical plan to the physical plan, which&#39;s a new interface.</li><li>Until 2022-11-30 TiDB master branch, TiDB optizmizer gets plan cost in the order of <code>DoOptimize</code> -&gt; <code>getPlanCost</code> -&gt; <code>getPlanCostVer1/getPlanCostVer2</code>.Actually, the method <a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan.go#L337" target="_blank" rel="noreferrer">getPlanCostVer1/getPlanCostVer2</a> of interface PhysicalPlan is use get psysical every operand cost. I mean, by their different implentation, you could figure out how it&#39;s calculated.</li><li>In <a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L39" target="_blank" rel="noreferrer">here</a>, you&#39;ll get that It figures out child cost one by one.</li></ol><h2 id="why-go-plancostver1-to-plancostver2" tabindex="-1">Why go PlanCostVer1 to PlanCostVer2 <a class="header-anchor" href="#why-go-plancostver1-to-plancostver2" aria-label="Permalink to &quot;Why go PlanCostVer1 to PlanCostVer2&quot;">​</a></h2><p>This <a href="https://github.com/pingcap/tidb/pull/35378" target="_blank" rel="noreferrer">PR</a> indeciates sometimes optimizer cannot discern which is the best datasource, so a new cost formular for <code>Selection/TableScan/IndexScan</code> has been merged. which are here below:</p><ol><li>Selection : rows<em>num-filters</em>cpu-factor, which Tiflash has a specific cpu-factor</li><li>TableScan : rows*log(row-size)*scan-factor, which Tiflash has a specific cpu-factor</li><li>indexScan : rows*log(row-size)*scan-factor</li></ol><h2 id="formula-map-of-operand-cost" tabindex="-1">Formula map of operand cost <a class="header-anchor" href="#formula-map-of-operand-cost" aria-label="Permalink to &quot;Formula map of operand cost&quot;">​</a></h2><ol><li>In the map below, you&#39;ll find a lot of factor and can get them on [Formula map of different factors](## Formula map of different factors ).</li></ol><table tabindex="0"><thead><tr><th>TaskType</th><th>version</th><th>cost calculated expression</th><th>code addr</th></tr></thead><tbody><tr><td>PhysicalSelection</td><td>2</td><td>cost = child-cost + filter-cost</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L62" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalProjection</td><td>2</td><td>cost = (child-cost + (proj-cost = rows * len(expressions) * cpu-factor)) / projection-concurrency</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L85" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalIndexScan</td><td>2</td><td>cost = rows * log2(row-size) * scan-factor</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L109" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalTableScan</td><td>2</td><td>cost = rows * log2(row-size) * scan-factor</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L126" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalIndexReader</td><td>2</td><td>cost = (child-cost + net-cost + seek-cost) / concurrency</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L150" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalTableReader</td><td>2</td><td>cost = (child-cost + (rows * row-size * net-factor) + (num-tasks * seek-factor)) / concurrency</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L178" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalIndexLookUpReader</td><td>2</td><td>cost = index-side-cost + (table-side-cost + double-read-cost) / double-read-concurrency</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L217" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalIndexMergeReader</td><td>2</td><td>cost = cost = table-side-cost + sum(index-side-cost)</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L269" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalSort</td><td>2</td><td>cost = child-cost + sort-cpu-cost + sort-mem-cost + sort-disk-cost</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L322" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalTopN</td><td>2</td><td>cost = child-cost + topn-cpu-cost + topn-mem-cost</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L372" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalStreamAgg</td><td>2</td><td>cost = child-cost + agg-cost + group-cost</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L402" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalHashAgg</td><td>2</td><td>child-cost + (agg-cost + group-cost + hash-build-cost + hash-probe-cost) / concurrency</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L425" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalMergeJoin</td><td>2</td><td>cost = left-child-cost + right-child-cost + filter-cost + group-cost</td><td></td></tr><tr><td>PhysicalHashJoin</td><td>2</td><td>cost = build-child-cost + probe-child-cost + build-hash-cost + build-filter-cost + (probe-filter-cost + probe-hash-cost) / concurrency</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L486" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalIndexJoin</td><td>2</td><td>cost = build-child-cost + build-filter-cost + (probe-cost + probe-filter-cost) / concurrency probe-cost = probe-child-cost * build-rows / batchRatio</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L530" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalIndexHashJoin</td><td>2</td><td>until 2022-11-30, It&#39;s the same as PhysicalIndexJoin</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L566" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalIndexMergeJoin</td><td>2</td><td>until 2022-11-30, It&#39;s the same as IndexJoin</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L571" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalApply</td><td>2</td><td>cost = uild-child-cost + build-filter-cost + probe-cost + probe-filter-cost</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L579" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalUnionAll</td><td>2</td><td>cost = sum(child-cost) / concurrency</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L609" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PhysicalExchangeReceiver</td><td>2</td><td>cost = child-cost + net-cost</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L630" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PointGetPlan</td><td>2</td><td>cost = child-cost + net-cost</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L652" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>PointGetPlan</td><td>2</td><td>cost = child-cost + net-cost</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L652" target="_blank" rel="noreferrer">here</a></td></tr><tr><td>BatchPointGetPlan</td><td>2</td><td>cost = seek-cost + net-cost</td><td><a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/planner/core/plan_cost_ver2.go#L676" target="_blank" rel="noreferrer">here</a></td></tr></tbody></table><h2 id="formula-map-of-different-factors" tabindex="-1">Formula map of different factors <a class="header-anchor" href="#formula-map-of-different-factors" aria-label="Permalink to &quot;Formula map of different factors&quot;">​</a></h2><table tabindex="0"><thead><tr><th>function name</th><th>name</th><th>factor name</th></tr></thead><tbody><tr><td>TiDBTemp</td><td>tidb_temp_table_factor</td><td>0</td></tr><tr><td>TiKVScan:</td><td>tikv_scan_factor</td><td>100</td></tr><tr><td>TiKVDescScan:</td><td>tikv_desc_scan_factor</td><td>150</td></tr><tr><td>TiFlashScan:</td><td>tiflash_scan_factor</td><td>5</td></tr><tr><td>TiDBCPU:</td><td>tidb_cpu_factor</td><td>30</td></tr><tr><td>TiKVCPU:</td><td>tikv_cpu_factor</td><td>30</td></tr><tr><td>TiFlashCPU:</td><td>tiflash_cpu_factor</td><td>5</td></tr><tr><td>TiDB2KVNet:</td><td>tidb_kv_net_factor</td><td>8</td></tr><tr><td>TiDB2FlashNet:</td><td>tidb_flash_net_factor</td><td>4</td></tr><tr><td>TiFlashMPPNet:</td><td>tiflash_mpp_net_factor</td><td>4</td></tr><tr><td>TiDBMem:</td><td>tidb_mem_factor</td><td>1</td></tr><tr><td>TiKVMem:</td><td>tikv_mem_factor</td><td>1</td></tr><tr><td>TiFlashMem:</td><td>tiflash_mem_factor</td><td>1</td></tr><tr><td>TiDBDisk:</td><td>tidb_disk_factor</td><td>1000</td></tr><tr><td>TiDBRequest:</td><td>tidb_request_factor</td><td>9500000</td></tr></tbody></table><h2 id="physicalselection" tabindex="-1">PhysicalSelection <a class="header-anchor" href="#physicalselection" aria-label="Permalink to &quot;PhysicalSelection&quot;">​</a></h2><ol><li>If row-size belongs to the type of PointGet, the row-size is 1. And row-size of BatchPointGet will come from stats.</li><li>And filter-cost indicates cost of this step which uses to calculate and filter the result, which is <code>row-size * float64(len(filters)) * (tidb_cpu_factor or tikv_cpu_factor or TiFlashCPU)</code>.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>plan-cost =  child-cost + filter-cost(row-size * float64(len(filters)) * (tidb_cpu_factor or tikv_cpu_factor or TiFlashCPU))</span></span></code></pre></div><h2 id="physicalprojection" tabindex="-1">PhysicalProjection <a class="header-anchor" href="#physicalprojection" aria-label="Permalink to &quot;PhysicalProjection&quot;">​</a></h2><ol><li>projection-concurrency can be modified by <a href="https://docs.pingcap.com/zh/tidb/stable/system-variables#tidb_executor_concurrency-%E4%BB%8E-v50-%E7%89%88%E6%9C%AC%E5%BC%80%E5%A7%8B%E5%BC%95%E5%85%A5" target="_blank" rel="noreferrer">tidb_executor_concurrency</a></li><li>proj-cost is equal to <code>row-size * len(expressions) * cpu-factor)</code>, which expressions is the number of column this step.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>                 child-cost + row-size * len(expressions) * cpu-factor</span></span>
<span class="line"><span>plan-cost =   ------------------------------------------------------------</span></span>
<span class="line"><span>                          projection-concurrency</span></span></code></pre></div><h2 id="physicalindexscan" tabindex="-1">PhysicalIndexScan <a class="header-anchor" href="#physicalindexscan" aria-label="Permalink to &quot;PhysicalIndexScan&quot;">​</a></h2><ol><li>rowSize(row-size) = AvgRowSize + [tablePrefix(1) + tableID(8) + indexPrefix(2) + indexID(8)] = AvgRowSize + 19.</li><li>BTW, the calculation of <code>AvgRowSize</code> is really complicated. if you wanna figure out how the result value is computed, please explore the code logic. And,<a href="https://github.com/pingcap/tidb/blob/17fac8bc2883dd287481a60f019beae948191a47/statistics/table.go#L1289" target="_blank" rel="noreferrer">here</a> are the code addr.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cost = rows * log2(row-size) * scan-factor</span></span></code></pre></div><h2 id="physicaltablescan" tabindex="-1">PhysicalTableScan <a class="header-anchor" href="#physicaltablescan" aria-label="Permalink to &quot;PhysicalTableScan&quot;">​</a></h2><ol><li>rows is the Cardinality generated by stats;</li><li>The expression is equal to PhysicalIndexScan.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cost = rows * log2(row-size) * scan-factor</span></span></code></pre></div><h2 id="physicalindexreader" tabindex="-1">PhysicalIndexReader <a class="header-anchor" href="#physicalindexreader" aria-label="Permalink to &quot;PhysicalIndexReader&quot;">​</a></h2><ol><li>Actually, the concurrency of this step is distSQLScanConcurrency(default 15) in system varliable, and can be changed by <a href="https://docs.pingcap.com/zh/tidb/dev/system-variables#tidb_distsql_scan_concurrency" target="_blank" rel="noreferrer">tidb_distsql_scan_concurrency</a>.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>           child-cost + rows * row-size * net-factor + num-tasks * seek-factor</span></span>
<span class="line"><span>cost =  -------------------------------------------------------------------------</span></span>
<span class="line"><span>                          tidb_distsql_scan_concurrency</span></span></code></pre></div><h2 id="physicaltablereader" tabindex="-1">PhysicalTableReader <a class="header-anchor" href="#physicaltablereader" aria-label="Permalink to &quot;PhysicalTableReader&quot;">​</a></h2><ol><li>equal to PhysicalIndexReader</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>           child-cost + rows * row-size * net-factor + num-tasks * seek-factor</span></span>
<span class="line"><span>cost =  -------------------------------------------------------------------------</span></span>
<span class="line"><span>                          tidb_distsql_scan_concurrency</span></span></code></pre></div><h2 id="physicalindexlookupreader" tabindex="-1">PhysicalIndexLookUpReader <a class="header-anchor" href="#physicalindexlookupreader" aria-label="Permalink to &quot;PhysicalIndexLookUpReader&quot;">​</a></h2><ol><li>How to change the concurrency is <a href="https://docs.pingcap.com/zh/tidb/dev/system-variables#tidb_executor_concurrency-%E4%BB%8E-v50-%E7%89%88%E6%9C%AC%E5%BC%80%E5%A7%8B%E5%BC%95%E5%85%A5" target="_blank" rel="noreferrer">tidb_index_lookup_concurrency</a> and now which named tidb_executor_concurrency.</li><li>index-side-cost = (index-child-cost + index-net-cost + index-seek-cost) / dist-concurrency, which is same with IndexReader</li><li>table-side-cost = (table-child-cost + table-net-cost + table-seek-cost) / dist-concurrency, which is same with TableReader</li><li>double-read-cost = double-read-seek-cost + double-read-cpu-cost</li><li>double-read-seek-cost = double-read-tasks * seek-factor</li><li>double-read-cpu-cost = index-rows * cpu-factor</li><li>double-read-tasks = index-rows / batch-size * task-per-batch ,and task-per-batch is a magic number 40 now</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>                   (index-child-cost + index-net-cost + index-seek-cost) +                          -&gt; index-side-cost</span></span>
<span class="line"><span>                    (table-child-cost + table-net-cost + table-seek-cost +                          -&gt; table-side-cost</span></span>
<span class="line"><span>          ((index-rows / batch-size * task-per-batch(40)) * seek-factor + index-rows * cpu-factor)) -&gt; double-read-cost</span></span>
<span class="line"><span>          -----------------------------------------------------------------------------------------</span></span>
<span class="line"><span>cost =                               dist-concurrency</span></span>
<span class="line"><span>      -------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>                                  double-read-concurrency</span></span></code></pre></div><h2 id="physicalindexmergereader" tabindex="-1">PhysicalIndexMergeReader <a class="header-anchor" href="#physicalindexmergereader" aria-label="Permalink to &quot;PhysicalIndexMergeReader&quot;">​</a></h2><ol><li>The cost is made up of index-side-cost and table-side-cost, and the formar&#39;s equal to IndexReader, and the latter&#39;s the same as TableReader.</li><li></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>          (table-child-cost + table-net-cost + table-seek-cost) + (index-child-cost + index-net-cost + index-seek-cost)</span></span>
<span class="line"><span>cost =  ----------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>                                                dist-concurrency</span></span></code></pre></div><h2 id="physicalsort" tabindex="-1">PhysicalSort <a class="header-anchor" href="#physicalsort" aria-label="Permalink to &quot;PhysicalSort&quot;">​</a></h2><ol><li>cost = child-cost + sort-cpu-cost + sort-mem-cost + sort-disk-cost</li><li>The Spill means that you&#39;re just going to have to use oomUseTmpStorage to save enough TiDB memor, When sort action happens.<br> a. if no spill, <code>sort-mem-cost</code> will be <code>rows * row-size * mem-factor</code> and, <code>sort-disk-cost</code> is 0;<br> b. if spill, <code>sort-mem-cost is</code> <code>mem-quota * mem-factor</code> and, <code>sort-disk-cost</code> is <code>rows * row-size * disk-factor</code>;</li><li>So, It&#39;s clear that when spill happend, <code>sort-mem-cost</code> and <code>sort-disk-cost</code> will change in an appropriate way.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cost = child-cost + (rows * log2(rows) * len(sort-items) * cpu-factor) + sort-mem-cost + sort-disk-cost</span></span></code></pre></div><h2 id="physicaltopn" tabindex="-1">PhysicalTopN <a class="header-anchor" href="#physicaltopn" aria-label="Permalink to &quot;PhysicalTopN&quot;">​</a></h2><ol><li>child-cost + topn-cpu-cost + topn-mem-cost</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cost = child-cost + (rows * log2(N) * len(sort-items) * cpu-factor) + (N * row-size * mem-factor)</span></span></code></pre></div><h2 id="physicalstreamagg" tabindex="-1">PhysicalStreamAgg <a class="header-anchor" href="#physicalstreamagg" aria-label="Permalink to &quot;PhysicalStreamAgg&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cost = child-cost + agg-cost + group-cost</span></span></code></pre></div><h2 id="physicalhashagg" tabindex="-1">PhysicalHashAgg <a class="header-anchor" href="#physicalhashagg" aria-label="Permalink to &quot;PhysicalHashAgg&quot;">​</a></h2><ol><li>Default value of <a href="https://docs.pingcap.com/zh/tidb/dev/system-variables#tidb_opt_concurrency_factor" target="_blank" rel="noreferrer">tidb_opt_concurrency_factor</a> is 5.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>           child-cost + (agg-cost + group-cost + hash-build-cost + hash-probe-cost)</span></span>
<span class="line"><span>cost =    --------------------------------------------------------------------------------</span></span>
<span class="line"><span>                                tidb_opt_concurrency_factor</span></span></code></pre></div><h2 id="physicalmergejoin" tabindex="-1">PhysicalMergeJoin <a class="header-anchor" href="#physicalmergejoin" aria-label="Permalink to &quot;PhysicalMergeJoin&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cost = left-child-cost + right-child-cost + filter-cost + group-cost</span></span></code></pre></div><h2 id="physicalhashjoin" tabindex="-1">PhysicalHashJoin <a class="header-anchor" href="#physicalhashjoin" aria-label="Permalink to &quot;PhysicalHashJoin&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>            build-child-cost + probe-child-cost + build-hash-cost + </span></span>
<span class="line"><span>cost =  build-filter-cost + (probe-filter-cost + probe-hash-cost) / concurrency</span></span></code></pre></div><h2 id="physicalindexjoin-physicalindexhashjoin-physicalindexmergejoin" tabindex="-1">PhysicalIndexJoin &amp; PhysicalIndexHashJoin &amp; PhysicalIndexMergeJoin <a class="header-anchor" href="#physicalindexjoin-physicalindexhashjoin-physicalindexmergejoin" aria-label="Permalink to &quot;PhysicalIndexJoin &amp; PhysicalIndexHashJoin &amp; PhysicalIndexMergeJoin&quot;">​</a></h2><ol><li>They are equal to IndexJoin.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cost =  build-child-cost + build-filter-cost +                                     </span></span>
<span class="line"><span>       (probe-child-cost * build-rows / batchRatio + probe-filter-cost) / concurrency</span></span></code></pre></div><h2 id="physicalapply" tabindex="-1">PhysicalApply <a class="header-anchor" href="#physicalapply" aria-label="Permalink to &quot;PhysicalApply&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cost = build-child-cost + build-filter-cost + probe-child-cost * build-rows + probe-filter-cost</span></span></code></pre></div><h2 id="physicalunionall" tabindex="-1">PhysicalUnionAll <a class="header-anchor" href="#physicalunionall" aria-label="Permalink to &quot;PhysicalUnionAll&quot;">​</a></h2><ol><li><a href="https://docs.pingcap.com/zh/tidb/dev/system-variables#tidb_opt_concurrency_factor" target="_blank" rel="noreferrer">tidb_opt_concurrency_factor</a> is the denominator below.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cost = sum(child-cost) / concurrency</span></span></code></pre></div><h2 id="physicalexchangereceiver-pointgetplan-pointgetplan-batchpointgetplan" tabindex="-1">PhysicalExchangeReceiver &amp; PointGetPlan &amp; PointGetPlan &amp; BatchPointGetPlan <a class="header-anchor" href="#physicalexchangereceiver-pointgetplan-pointgetplan-batchpointgetplan" aria-label="Permalink to &quot;PhysicalExchangeReceiver &amp; PointGetPlan &amp; PointGetPlan &amp; BatchPointGetPlan&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cost = child-cost + net-cost</span></span></code></pre></div>`,61)]))}const g=e(c,[["render",i]]);export{b as __pageData,g as default};
