import{_ as i,c as t,o as a,a4 as n}from"./chunks/framework.svyMRVY3.js";const r="/assets/01tidb-lightning-arch.DS_8si9i.jpeg",b=JSON.parse('{"title":"TiDB-Lighting Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"en/work/tidb/TiDB-EcosystematicTools/5-7TiDB-Lightning/02Lighting Architecture.md","filePath":"en/work/tidb/TiDB-EcosystematicTools/5-7TiDB-Lightning/02Lighting Architecture.md"}'),s={name:"en/work/tidb/TiDB-EcosystematicTools/5-7TiDB-Lightning/02Lighting Architecture.md"};function o(l,e,c,d,h,p){return a(),t("div",null,e[0]||(e[0]=[n('<h1 id="tidb-lighting-architecture" tabindex="-1">TiDB-Lighting Architecture <a class="header-anchor" href="#tidb-lighting-architecture" aria-label="Permalink to &quot;TiDB-Lighting Architecture&quot;">​</a></h1><h2 id="_1-overview" tabindex="-1">1. Overview <a class="header-anchor" href="#_1-overview" aria-label="Permalink to &quot;1. Overview&quot;">​</a></h2><ol><li><p>If you wanna some older things or designs about <a href="https://github.com/pingcap/tidb-lightning" target="_blank" rel="noreferrer">TiDB-Lighting</a>, and now It&#39;s been merged into <a href="https://github.com/pingcap/tidb/tree/master/br/cmd/tidb-lightning" target="_blank" rel="noreferrer">BR as the part of TiDB repo</a>.</p></li><li><p>Also tidb-lightning can be divided into two parts frontend and backend, more details from <a href="https://www.bilibili.com/video/BV1D5411L7z5/" target="_blank" rel="noreferrer">a video sharing</a>.</p><figure><img src="'+r+`" alt="01tidb-lightning-arch" tabindex="0"><figcaption>01tidb-lightning-arch</figcaption></figure></li><li><p>Here&#39;s a simple steps to guide you how tidb-lightning runs. Inside the <code>run</code> function, every Options&#39;ll be executed steps by steps including a range of things code block below.</p><blockquote><p>Startup step Chain : main() --&gt; app.RunOnceWithOptions --&gt; lightning.run --&gt; restore.NewRestoreController --&gt; Controller.run.</p></blockquote><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rc.setGlobalVariables,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rc.restoreSchema,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rc.preCheckRequirements,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rc.initCheckpoint,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rc.restoreTables,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rc.fullCompact,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rc.cleanCheckpoints,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Let&#39;s get started deeply on <code>preCheckRequirements</code>, <code>initCheckpoint</code>, <code>restoreTables</code> and <code>fullCompact</code>. Because, IMHO, It&#39;s the most useful for me/us to unsterstand how it works.</p></li></ol><h2 id="_2-main-steps" tabindex="-1">2. Main Steps <a class="header-anchor" href="#_2-main-steps" aria-label="Permalink to &quot;2. Main Steps&quot;">​</a></h2><ol><li><p>For <code>preCheckRequirements</code>,</p></li><li><p>For <code>initCheckpoint</code>,</p><ul><li><a href="https://github.com/pingcap/tidb/blob/eb35c773b512e4e00c42caf7f04ea7397d00c127/br/pkg/lightning/checkpoints/checkpoints.go#L511" target="_blank" rel="noreferrer">type DB interface</a> is a key interface to be familiar with what functions the checkpoint have.</li></ul></li><li><p>For <code>restoreTables</code>, in short, it&#39;s the most important, pivotal to see how lightning does restore and responsible for somethings like <code>init concurrent thread pools</code>, <code>pause schedulers in PD</code>, <code>Restore engines</code> and so forth.</p><ul><li>The two parameters including table-concurrency and index-concurrency can take effect in both tidb-bakcend and local-backend mode. <ul><li>table-concurrency : represent how many threads to import <strong>table data</strong> parallely inside the <a href="https://github.com/pingcap/tidb/blob/eb35c773b512e4e00c42caf7f04ea7397d00c127/br/pkg/lightning/restore/restore.go#L1440" target="_blank" rel="noreferrer">Controller.restoreTables</a>.</li><li>index-concurrency : the same as <code>table-concurrency</code> just serving for index parallely.</li></ul></li><li>If in local-backend mode, there&#39;re a couple of special operations needed to be done and compared with tidb-backend mode. <ul><li><strong>firstly</strong>, <a href="https://github.com/pingcap/tidb/blob/eb35c773b512e4e00c42caf7f04ea7397d00c127/br/pkg/lightning/restore/restore.go#L1468-L1475" target="_blank" rel="noreferrer">pauses schedulers</a> existing in PD. And there&#39;s a tune named <code>CanPauseSchedulerByKeyRange</code>, after v6.1.0 version, which detects whether the scheduler can pause by the key range. If not, all existed schedulers in pd are gonna be deleted and saved in tidb-lightning, untill everthing is ok or tidb-lightning crashs, it&#39;ll be restored.</li><li><strong>Secondly</strong>, disables GC of tidb cluster by calling <code>tikv://PdAddr?disableGC=true</code>.</li><li><strong>Thirdly</strong>, builds a checksum handler encapsulated a db connection inside.</li></ul></li><li>The other logics inside the function are being shared by two tidb or local beckend mode. Builds threads in the number of <code>index-concurrency</code> to receive index tasks and in the same way to receive table tasks with <code>table-concurrency</code>. Every task including two key info <code>TableRestore</code> and <code>Checkpoint</code> will be constructed by looping every table in meta, be put to allTasks channel and be processed by the two pools.</li><li><a href="https://github.com/pingcap/tidb/blob/eb35c773b512e4e00c42caf7f04ea7397d00c127/br/pkg/lightning/restore/table_restore.go#L97" target="_blank" rel="noreferrer"><code>populateChunks</code></a> will split source files into region size in the concurrency of Max(region-concurrency, 2). In short there&#39;s an inside <a href="https://github.com/pingcap/tidb/blob/eb35c773b512e4e00c42caf7f04ea7397d00c127/br/pkg/lightning/mydump/region.go#L149" target="_blank" rel="noreferrer">fun MarkTableRegion</a> belonged to MyDump, which&#39;s responsible for creating a new source file region. <strong>So, if your sourfile is very big, It&#39;ll have a bad impact on concurrent executing</strong>. In this case, a warn message will be here called <code>file is too big to be processed efficiently; we suggest splitting it at 256 MB each ...</code>.</li><li>There&#39;re some some special and important processes all named postProcess needed to execute rebase-auto-id/checksum/analyze according to the task config inside the <a href="https://github.com/pingcap/tidb/blob/eb35c773b512e4e00c42caf7f04ea7397d00c127/br/pkg/lightning/restore/restore.go#L1574-L1584" target="_blank" rel="noreferrer">func Controller.restoreTables</a>. Untill all engines are already restored, the postProcesses will be executed in <code>table-concurrency</code> concurrently.</li></ul></li><li><p>For <code>fullCompact</code>, I&#39;ve gotta say it&#39;s for an orginal problem which&#39;ll cause performance ingesting data, but now this feature has <strong>been deprecated</strong>. The <a href="https://github.com/pingcap/tidb-lightning/pull/119/commits" target="_blank" rel="noreferrer">&quot;do not do compact after engine file imported&quot;</a> pointed that TiKV had supported <code>auto compaction</code> during importing data. Since then, there was no need to do compaction. That means, in higher version , TiKV is capable of compacting during importing whatever local-backen or tidb-backend mode you are using.</p></li></ol><h2 id="_3-frontend-and-backend" tabindex="-1">3. Frontend and Backend <a class="header-anchor" href="#_3-frontend-and-backend" aria-label="Permalink to &quot;3. Frontend and Backend&quot;">​</a></h2><h3 id="_3-1-frontend" tabindex="-1">3.1 Frontend <a class="header-anchor" href="#_3-1-frontend" aria-label="Permalink to &quot;3.1 Frontend&quot;">​</a></h3><ul><li><p><a href="https://github.com/pingcap/tidb/blob/5d2030e1d19629b71811c3f14514bad7ed63261a/br/pkg/lightning/restore/table_restore.go#L494" target="_blank" rel="noreferrer">newChunkRestore</a> is gonna generate a parser to encode csv/sql/parquent into kvs.</p></li><li><p><a href="https://github.com/pingcap/tidb/blob/5d2030e1d19629b71811c3f14514bad7ed63261a/dumpling/export/ir.go#L16" target="_blank" rel="noreferrer">IR</a> represents an intermediate representation.</p></li></ul><h3 id="_3-2-backend" tabindex="-1">3.2 Backend <a class="header-anchor" href="#_3-2-backend" aria-label="Permalink to &quot;3.2 Backend&quot;">​</a></h3><h2 id="_4-parameters" tabindex="-1">4. Parameters <a class="header-anchor" href="#_4-parameters" aria-label="Permalink to &quot;4. Parameters&quot;">​</a></h2>`,10)]))}const u=i(s,[["render",o]]);export{b as __pageData,u as default};
