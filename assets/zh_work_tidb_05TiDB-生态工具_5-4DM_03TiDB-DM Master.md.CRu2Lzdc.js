import{_ as i}from"./chunks/02-DM_Master_Components.BW5Kml3C.js";import{_ as a,c as n,a4 as t,o as e}from"./chunks/framework.C3yiUNUH.js";const D=JSON.parse('{"title":"TiDB DM Master","description":"","frontmatter":{},"headers":[],"relativePath":"zh/work/tidb/05TiDB-生态工具/5-4DM/03TiDB-DM Master.md","filePath":"zh/work/tidb/05TiDB-生态工具/5-4DM/03TiDB-DM Master.md"}'),l={name:"zh/work/tidb/05TiDB-生态工具/5-4DM/03TiDB-DM Master.md"};function h(p,s,k,r,o,d){return e(),n("div",null,s[0]||(s[0]=[t('<h1 id="tidb-dm-master" tabindex="-1">TiDB DM Master <a class="header-anchor" href="#tidb-dm-master" aria-label="Permalink to &quot;TiDB DM Master&quot;">​</a></h1><h2 id="what-s-dm-master" tabindex="-1">What&#39;s DM Master <a class="header-anchor" href="#what-s-dm-master" aria-label="Permalink to &quot;What&#39;s DM Master&quot;">​</a></h2><figure><img src="'+i+`" alt="DM_Master_Components" tabindex="0"><figcaption>DM_Master_Components</figcaption></figure><h2 id="etcd" tabindex="-1">Etcd <a class="header-anchor" href="#etcd" aria-label="Permalink to &quot;Etcd&quot;">​</a></h2><p><strong>DM Master高可用性如何工作</strong> : 大多数情况下，这是由于ectd的可用特性，它将所有持久化数据存储在DM集群中。同时，到 <a href="#election">the Election</a>，只有 DM Master 的领导才能启动组件和 etcd 工作，并且领导还定期检查DM是否有严重的问题，在正确的时间立即执行恢复操作。</p><h2 id="openapihandles" tabindex="-1">OpenapiHandles <a class="header-anchor" href="#openapihandles" aria-label="Permalink to &quot;OpenapiHandles&quot;">​</a></h2><p>DM 提供 <a href="https://docs.pingcap.com/tidb/stable/dm-open-api" target="_blank" rel="noreferrer">OpenAPI</a> 来操作/创建任务、Binlog 源等,就像在 dm-ctl 命令中使用它一样,主要由 OpenapiHandler 封装在 DM Master 中实现。当DM Master leader 启动时工作。同时，如果 DM Worker peer 收到 OpenAPI 请求，将请求重定向给leader 处理。</p><h2 id="agentpool" tabindex="-1">AgentPool <a class="header-anchor" href="#agentpool" aria-label="Permalink to &quot;AgentPool&quot;">​</a></h2><ol><li><p>此组件是在 <a href="https://github.com/pingcap/dm/pull/157" target="_blank" rel="noreferrer">此PR</a> 中添加的，主要是期待在 dm-master 中添加速率限制和 rpc 客户端管理。虽然，它是整个DM Master组件中的关键组件，但我之所以决定介绍它，是因为它出现在 <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/server.go#L127" target="_blank" rel="noreferrer">Server</a> 结构体中。</p></li><li><p>它的主要实现方式是封装 <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/agent_pool.go#L60" target="_blank" rel="noreferrer">golang rate.Limit</a> 包。</p></li></ol><h2 id="election" tabindex="-1">Election <a class="header-anchor" href="#election" aria-label="Permalink to &quot;Election&quot;">​</a></h2><ol><li><strong>首先</strong>，它是一个构建在 etcd 基础上实现 leader 选举功能的高可用封装。</li><li><strong>其次</strong>，函数<a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/pkg/election/election.go#L200" target="_blank" rel="noreferrer">compaignLoop</a>是理解逻辑概念如何持续运行的关键。它会定期重选 DM leader ，并且由 <strong>leader 将启动</strong>一些组件，包括 <code>Scheduler</code>，<code>Pessimist</code> 和 <code>Optimist</code>，DM Master follower 不负责这些，只有在成为 leader 时才负责。</li><li><strong>然后</strong>，它还将 task 分成 subtask，这些 subtask 在一个迁移任务中只代表一个 source(或 worker)(<strong>逻辑对应关系: 1 个 worker VS 1 个 source VS 1 个 subtask</strong>)。</li></ol><h2 id="scheduler" tabindex="-1">Scheduler <a class="header-anchor" href="#scheduler" aria-label="Permalink to &quot;Scheduler&quot;">​</a></h2><ol><li><strong>首先</strong>，调度器是Master的一部分，它负责DM worker的任务，如“注册/取消注册”，“观察在线/离线”，“观察添加/删除源配置”，“计划上游源”，“计划数据迁移子任务”等等，更多详细信息请参阅<a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/scheduler/scheduler.go#L44" target="_blank" rel="noreferrer">这里</a>。</li><li><strong>第二</strong>，调度器实际上做的是，一方面，一些后台gorountines在启动主实例后持续运行，如<a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/scheduler/scheduler.go#L2081" target="_blank" rel="noreferrer"><code>observeWorkerEvent</code></a>将收到DM Worker触发的keepalive状态，另一方面，当dmctl或openAPI发送一些操作时，其他将被触发，如:<a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/scheduler/scheduler.go#L441" target="_blank" rel="noreferrer"><code>RemoveSourceCfg</code></a>。大多数情况下，函数都嵌入到GRPC定义中。</li><li><strong>第三</strong>，它还从一个复制任务生成子任务，并将它们持久化在etcd上。</li></ol><h2 id="pessimist" tabindex="-1">Pessimist <a class="header-anchor" href="#pessimist" aria-label="Permalink to &quot;Pessimist&quot;">​</a></h2><ol><li><p>首先，我们可以看到悲观主义者从上图中提出了“DM Master”和“syncer”的两个部分。这一部分将重点介绍DM Master在内部做什么。从 <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/shardddl/pessimist.go#L464" target="_blank" rel="noreferrer">the function handleInfoPut of DM Master</a> 中，我们可以确保当DM Master从etcd中接收到足够多的信息时，这个信息被DM Master处理。实际上，dm-ctl也可以生成操作，就像DDL锁的一些严重错误一样，当你使用<a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/shardddl/pessimist.go#L343" target="_blank" rel="noreferrer"><code>waitOwnerToBeDone</code></a> 的逻辑在里面使用&#39; unlock-ddl-lock &#39;时。从代码中，当 <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/syncer/ddl.go#L641" target="_blank" rel="noreferrer">shardOp.Exec</a> 是分片DDL锁的所有者并且由DM主领导者的 <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/shardddl/pessimist.go#L605" target="_blank" rel="noreferrer">putOpForOwner</a> 编写时，它将为真。我的意思是，这是实现的逻辑，实际上是所有者执行下游的唯一一个DDL。在worker的“Syncer”中，DM-worker所做的只是在&#39; the handledl function &#39;接收到任何DDL MySQL binlog事件时，将信息放入DM-Master的etcd中，同时，如果它是所有者或第一个满足DDL的worker，它也负责执行。</p></li><li><p>第二，PTAL在<a href="https://docs.pingcap.com/zh/tidb-data-migration/v5.3/feature-shard-merge-pessimistic#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">分片-合并-悲观</a>的概念逻辑，<a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/pkg/shardddl/pessimism/doc.go" target="_blank" rel="noreferrer">实现细节</a>。简而言之，它实际上所做的是将DM集群中的每个DML保存在尚未同步的特定DDL时间戳之前，直到DDL结束。简而言之，如果在一个分片组中存在DDL复制(多个MySQL分片表到一个TiDB表中)，第一个满足DDL查询的worker将通知DM-Master生成一个锁，然后阻塞相关的DDL和DML查询。在所有源的DDL都报告给DM-Master之前，已经被选为所有者的那个worker开始执行DDL。如果成功执行了DDL，它将重放被阻塞的DDL和DML查询，并像往常一样重放复制。</p><figure><img src="https://download.pingcap.com/images/tidb-data-migration/shard-ddl-flow.png" alt="pessimism" tabindex="0"><figcaption>pessimism</figcaption></figure></li><li><p><code>LockKeeper</code> 封装了 <code>Lock</code>，用于方便地保存和处理DDL锁，并且在复制任务中，锁与DDL在特定时间是1对1的关系。两人也都不需要当总统。因为它可以从DM-Worker保存在DM-Master etcd中的碎片DDL信息重新构建。并且，这个strcut有一个名为TrySync的键函数，它通过增加剩余的 <strong>数量来同步锁</strong>，如果它从MySQL Binlog 接收到 DDL事件，则该数量等于源(相关worker) 的数量。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Lock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mu </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RWMutex</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ID     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // lock&#39;s ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Task   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // lock&#39;s corresponding task name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Owner  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Owner&#39;s source ID (not DM-worker&#39;s name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DDLs   []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // DDL statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // remain count of sources needed to receive DDL info</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// whether the DDL info received from the source.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// if all of them have been ready, then we call the lock \`synced\`.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ready </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// whether the operations have done (exec/skip the shard DDL).</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// if all of them have done, then we call the lock \`resolved\`.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LockKeeper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mu    </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RWMutex</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">locks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Lock</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // lockID -&gt; Lock</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>Info</code> 表示shard DDL信息，<code>Operation</code> 表示shard DDL坐标操作，所有信息都应该持久化在etcd中。“信息”和“操作”之间的另一个关键区别是，我们必须知道DM Worker只是将锁或DDL信息发送给DM Master，并从etcd中观看操作。因此，DM Master将使用<a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/shardddl/pessimist.go#L601" target="_blank" rel="noreferrer"><code>func putOpForOwner</code></a>将操作放入etcd以执行DDL。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Task   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;task&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // data migration task name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;source&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // upstream source ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Schema </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;schema&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // schema name of the DDL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Table  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;table&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // table name of the DDL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DDLs   []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;ddls&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // DDL statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ID     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;id&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // the corresponding DDL lock ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Task   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;task&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // data migration task name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;source&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // upstream source ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DDLs   []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;ddls&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // DDL statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Exec   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     \`json:&quot;exec&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // execute or skip the DDL statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Done   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     \`json:&quot;done&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // whether the \`Exec\` operation has done</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // only used to report to the caller of the watcher, do not marsh it.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // if it&#39;s true, it means the Operation has been deleted in etcd.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    IsDeleted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;-&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>最后，我想说这里有很多与持久化数据相关的关键函数比如 <code>handleInfoPut</code>, <code>handleOperationPut</code> 等等。他们都是与 DM Master 的 etcd 交互。但是在我的 DM 概览图中，没有被清晰地刻画出来。</p></li><li><p>如果你想了解更多细节，我建议你阅读这个<a href="https://tidb.net/blog/ebc3d5e6" target="_blank" rel="noreferrer">content</a>，它描述了更多关于锁如何解析的信息，以及 dml 如何重新同步(我上面提到的概念应该是阻塞，实际上我忽略了这部分)在<a href="https://tidb.net/blog/80c41c9d" target="_blank" rel="noreferrer">这里</a>。这些内容没有英文版本，请使用其他翻译工具来解决。</p></li></ol><h2 id="optimist" tabindex="-1">Optimist <a class="header-anchor" href="#optimist" aria-label="Permalink to &quot;Optimist&quot;">​</a></h2><ol><li><p>还有一个重要的<a href="https://docs.pingcap.com/zh/tidb-data-migration/v5.3/feature-shard-merge-optimistic#%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">概念逻辑</a>你必须首先知道。我还将对该模式进行总结，与悲观模式相比，DDL不会阻塞DML复制。</p></li><li><p>LockKeeper和Lock用于方便地保存和处理DDL锁。概念逻辑功能相当于锁定悲观主义。这个高度等于悲观主义者的一部分。</p></li><li><p>还有一个 <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/pkg/shardddl/optimism/doc.go#L16" target="_blank" rel="noreferrer">Doc</a>只是简单地说不同于悲观主义者。实际上，我认为你可以阅读这个页面，它等于一个或更多的信息，你可以得到<a href="https://docs.pingcap.com/tidb-data-migration/v5.3/feature-shard-merge-optimistic#restrictions" target="_blank" rel="noreferrer">这里</a>。让我们开始看看DM Master在乐观模式下对DDL复制分片做了什么。</p><figure><img src="https://download.pingcap.com/images/tidb-data-migration/optimistic-ddl-flow.png" alt="optimistic" tabindex="0"><figcaption>optimistic</figcaption></figure></li><li><p>我们可以简单地得到，信息和操作不同于悲观主义者的结构。乐观主义者操作的信息包含了比悲观主义者更多的东西，比如 <code>TableInfoBefore</code>， <code>tableinfoafter</code>，<code>DownTable</code> 等等，它们被用来计算DDL应该如何转换。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Task       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;task&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // data migration task name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Source     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;source&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // upstream source ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UpSchema   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;up-schema&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // upstream/source schema name, different sources can have the same schema name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UpTable    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;up-table&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // upstream/source table name, different sources can have the same table name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DownSchema </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;down-schema&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // downstream/target schema name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DownTable  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;down-table&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // downstream/target table name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DDLs       []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;ddls&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // DDL statements</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TableInfoBefore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TableInfo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`json:&quot;table-info-before&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // the tracked table schema before applying the DDLs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TableInfosAfter []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TableInfo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;table-info-after&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // the tracked table schema after applying the DDLs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// only used to report to the caller of the watcher, do not marsh it.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// if it&#39;s true, it means the Info has been deleted in etcd.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IsDeleted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;-&quot;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// only set it when get/watch from etcd</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;-&quot;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// only set it when get from etcd</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// use for sort infos in recoverlock</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Revision </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;-&quot;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// use to resolve conflict</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IgnoreConflict </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;ignore-conflict&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ID            </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \`json:&quot;id&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               // the corresponding DDL lock ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Task          </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \`json:&quot;task&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // data migration task name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Source        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \`json:&quot;source&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // upstream source ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UpSchema      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \`json:&quot;up-schema&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // upstream/source schema name, different sources can have the same schema name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UpTable       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \`json:&quot;up-table&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // upstream/source table name, different sources can have the same table name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DDLs          []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      \`json:&quot;ddls&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // DDL statements need to apply to the downstream.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConflictStage </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ConflictStage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;conflict-stage&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // current conflict stage.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConflictMsg   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \`json:&quot;conflict-message&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // current conflict message</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Done          </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          \`json:&quot;done&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // whether the operation has done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cols          []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      \`json:&quot;cols&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // drop columns&#39; name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// only set it when get from etcd</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// use for sort infos in recovering locks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Revision </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;-&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>DM Master如何转换DDL信息或模式信息</strong> 只是试图检测是否有任何DDL冲突，并允许每个DML同步到下游尽快。如果有错误或冲突，它将被报告。</p></li></ol>`,17)]))}const E=a(l,[["render",h]]);export{D as __pageData,E as default};
