import{_ as s}from"./chunks/03-DM_Worker_Components.CNbSlk6_.js";import{_ as a,c as i,o as t,a4 as r}from"./chunks/framework.CGsRFzUA.js";const b=JSON.parse('{"title":"DM Worker","description":"","frontmatter":{},"headers":[],"relativePath":"en/work/tidb/TiDB-EcosystematicTools/5-4DM/04TiDB-DM Worker.md","filePath":"en/work/tidb/TiDB-EcosystematicTools/5-4DM/04TiDB-DM Worker.md"}'),n={name:"en/work/tidb/TiDB-EcosystematicTools/5-4DM/04TiDB-DM Worker.md"};function o(l,e,h,p,d,k){return t(),i("div",null,e[0]||(e[0]=[r('<h1 id="dm-worker" tabindex="-1">DM Worker <a class="header-anchor" href="#dm-worker" aria-label="Permalink to &quot;DM Worker&quot;">​</a></h1><h2 id="what-s-dm-worker" tabindex="-1">What&#39;s DM Worker <a class="header-anchor" href="#what-s-dm-worker" aria-label="Permalink to &quot;What&#39;s DM Worker&quot;">​</a></h2><p>DM Worker starts from the <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/worker/server.go#L106-L108" target="_blank" rel="noreferrer">func start</a> then starts a series of componnets including <code>startKeepAlive</code>, <code>RelayHandler</code>, <code>SubTasks</code>, <code>Syncer</code>. About the relay config, there&#39;s a <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/worker/server.go#L160-L164" target="_blank" rel="noreferrer">logic</a> to adjust wether use remote MySQL Binlog or Local relay log.</p><figure><img src="'+s+`" alt="DM_Worker_Components" tabindex="0"><figcaption>DM_Worker_Components</figcaption></figure><h2 id="keepalive" tabindex="-1">KeepAlive <a class="header-anchor" href="#keepalive" aria-label="Permalink to &quot;KeepAlive&quot;">​</a></h2><ol><li><p><strong>What&#39;s the functionality.</strong> DM Worker keepalive with master. If worker loses connect from master, it would stop all task and try to connect master again.</p></li><li><p><strong>How does it work.</strong> The <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/worker/join.go#L103" target="_blank" rel="noreferrer">defaultKeepAliveTTL</a> is 1 minutes, which periodically use <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/pkg/ha/keepalive.go#L116" target="_blank" rel="noreferrer">etcd cli.Grant</a> to put kv with TTL to etcd. In that way, DM Master could be able to transter subtask into another alive DM Worker if there&#39;s something seriously wrong with the worker which already has bounded with one specific MySQL Binlog.</p></li></ol><h2 id="relay" tabindex="-1">Relay <a class="header-anchor" href="#relay" aria-label="Permalink to &quot;Relay&quot;">​</a></h2><ol><li><p><strong>How to detect if it&#39;s configed.</strong> When configuration cannot be obtained from DM Master, which means the task was already deleted or hasn&#39;t been configed, that starting <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/worker/server.go#L183-L185" target="_blank" rel="noreferrer">logic</a> goes inside the <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/worker/server.go#L686-L688" target="_blank" rel="noreferrer">func enableHandleSubtasks</a> to justify wether to use Realy log.</p></li><li><p><strong>How to work if it&#39;s configed.</strong> I recommend you to have more relay implmented info in <a href="https://cn.pingcap.com/blog/dm-source-code-reading-6" target="_blank" rel="noreferrer">this article - DM 源码阅读系列文章（六）relay log 的实现</a> (BTW: you need english version might changing by yourself). In short, Relay log is a bridge function avoiding suddenly remote MySQL Binlog disappearing, and it&#39;s implmented by that firstly read every useful binlog, like insert/update... using <a href="https://github.com/pingcap/dm/blob/f6f0566424/relay/reader/reader.go#L128" target="_blank" rel="noreferrer">GetEvent</a>, then write into relay log dir as below. DM Worker uses relay when enabled, and calls <a href="https://github.com/pingcap/dm/blob/f6f0566424/pkg/streamer/reader.go#L244" target="_blank" rel="noreferrer">func parseFile</a> to parse Relay log to syncer.<br><strong>a. server-uuid.index</strong> : An index already organized binglog events to provide a structure to index where to read.<br><strong>b. 842965eb-091c-11e9-9e45-9a3bff03fa39</strong> : Dir generated by the <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/relay/meta.go#L279" target="_blank" rel="noreferrer">func utils.AddSuffixForUUID</a> in format of <code>fmt.Sprintf(&quot;%s%s%06d&quot;, uuid, uuidIndexSeparator, id)</code>.<br><strong>c. relay.meta</strong> : Record current prorocess or progress.<br><strong>d. mysql-bin.00000X</strong> : The max number of X is the newest file which&#39;s being written.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">deploy_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/relay_log/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 7e427cc0-091c-11e9-9e45-72b7c59d52d7.000001</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql-bin.000001</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql-bin.000002</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql-bin.000003</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql-bin.000004</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> relay.meta</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 842965eb-091c-11e9-9e45-9a3bff03fa39.000002</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql-bin.000001</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> relay.meta</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  server-uuid.index</span></span></code></pre></div></li></ol><h2 id="subtasks" tabindex="-1">SubTasks <a class="header-anchor" href="#subtasks" aria-label="Permalink to &quot;SubTasks&quot;">​</a></h2><ol><li><p><strong>What does it mean.</strong> SubTask represents a sub task of data migration. In other words, the number of subtasks is equal to MySQL Binlog number. All because they have 1-1 replationship. we can see the one by <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/worker/subtask.go#L77" target="_blank" rel="noreferrer">it&#39;s struct</a> below. As we all know, one working worker has only one binlog till now. One noticeable feature is PingCAP is trying to decouple the 1-1 replationship, you can flow the progress by the tracking <a href="https://github.com/pingcap/tiflow/issues/4687" target="_blank" rel="noreferrer">Issue</a>.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubTask</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cfg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SubTaskConfig</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">workerName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">validator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">syncer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataValidator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>How does it be created.</strong> The mainly places to generate subTask from task is in <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/openapi_controller.go#L386" target="_blank" rel="noreferrer">OpenAPITaskToSubTaskConfigs</a> and <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/server.go#L510" target="_blank" rel="noreferrer">StartTask</a>. Noticable, not just the only two, but also <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/master/server.go#L725" target="_blank" rel="noreferrer">UpdateTask</a>. But we&#39;re just foucsing on normally where it comes from. So, you can explore it by yourself if you&#39;re interested in.</p></li></ol><h2 id="sourceworker" tabindex="-1">SourceWorker <a class="header-anchor" href="#sourceworker" aria-label="Permalink to &quot;SourceWorker&quot;">​</a></h2><ol><li><p><strong>What does it responsible for.</strong> SourceWorker manages a source(upstream) which is mainly related to subtasks and relay. It has lots of functions such as <code>updateSourceStatus</code>, <code>fetchSubTasksAndAdjust</code>, <code>operateRelay</code> and <code>PurgeRelay</code> ..., we can see what the functionality is.</p></li><li><p><strong>How does it work.</strong> Just focusing on the main part(StartSubTask), I think, of SourceWorker functionalities. As mentioned before, when one DM Worker has been started, it&#39;d gotten subTask config and Bound relationship by requesting to etcd. So following the calling chain of <code>EnableHandleSubtasks--&gt;w.StartSubTask--&gt;st.Run--&gt;initUnits--&gt;createUnits</code>, a working logic will be showed clearly. And, in <a href="https://github.com/pingcap/tiflow/blob/c65e2b72198de10319008b31dcf13d51509ccfde/dm/worker/subtask.go#L52" target="_blank" rel="noreferrer">func createRealUnits</a>, there&#39;re some steps to adjust wether <code>ModeAll</code> or <code>ModeIncrement</code>. PLZ learn it by yourself if very interested in.</p></li></ol><h2 id="syncer" tabindex="-1">Syncer <a class="header-anchor" href="#syncer" aria-label="Permalink to &quot;Syncer&quot;">​</a></h2><p>I&#39;ve gotta say <code>Syncer</code> is the most important component of DM Worker, or even DM. So, It was splited into a single content to explain how it works. At <a href="./05TiDB-DM syncer.html">here</a>.</p>`,14)]))}const f=a(n,[["render",o]]);export{b as __pageData,f as default};
