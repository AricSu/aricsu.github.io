import{_ as i,c as a,o as t,a5 as e}from"./chunks/framework.JWlnoUZ4.js";const n="/assets/Prometheus01.COBjptnp.png",h="/assets/prometheus02.CtBGaiMZ.png",l="/assets/prometheus03.CIACtrHf.jpg",p="/assets/prometheus04.BS9CuoQL.png",k="/assets/prometheus05.CEcD-atm.jpg",r="/assets/prometheus06.DF70n4s2.jpg",o="/assets/prometheus07.Dpc9Uuac.jpg",d="/assets/prometheus08.DCPRlz7g.jpg",E="/assets/prometheus09.CdGs2gRm.jpg",D=JSON.parse('{"title":"TiDB之Prometheus","description":"TiDB之Prometheus","frontmatter":{"title":"TiDB之Prometheus","description":"TiDB之Prometheus"},"headers":[],"relativePath":"zh/work/tidb/03TiDB-运维管理/3-1TiDB 监控详解/TiDB-Prometheus.md","filePath":"zh/work/tidb/03TiDB-运维管理/3-1TiDB 监控详解/TiDB-Prometheus.md"}'),g={name:"zh/work/tidb/03TiDB-运维管理/3-1TiDB 监控详解/TiDB-Prometheus.md"};function c(u,s,y,m,F,f){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="tidb之prometheus" tabindex="-1">TiDB之Prometheus <a class="header-anchor" href="#tidb之prometheus" aria-label="Permalink to &quot;TiDB之Prometheus&quot;">​</a></h1><p>如果您需要100%的准确性，例如按请求计费，普罗米修斯不是一个好选择，因为收集的数据可能不够详细和完整。在这种情况下，您最好使用其他系统来收集和分析计费数据，并使用普罗米修斯进行其余的监控。</p><h2 id="一、prometheus-特性定义" tabindex="-1">一、prometheus 特性定义 <a class="header-anchor" href="#一、prometheus-特性定义" aria-label="Permalink to &quot;一、prometheus 特性定义&quot;">​</a></h2><p>        依据 <a href="https://prometheus.io/docs/introduction/overview/#what-is-prometheus" target="_blank" rel="noreferrer">Prometheus 官网的定义</a>,Prometheus 是一个开源的、系统监控及警报的工具包。具有如下特点：</p><ol><li><strong>多维时序数据：</strong> Prometheus 以时间序列为基础，通过追加键值对标识的方式，实现了多维度的数据模型。</li><li><strong>查询语句支持：</strong> Prometheus 支持 PromQL 允许对时间序列数据切片计算，以便生成图表、表格、警报。PromQL 与 SQL 类似，同属声明式查询语言，Prometheus 提供了多种函数完成，时序数据的聚合，如：rate、irate、delta 等等。</li><li><strong>可视效果美观：</strong> Prometheus 支持多种的可视化模式，如：内置的 Dashboard 浏览器或集成 Grafana 等。</li><li><strong>存储方式高效：</strong> Prometheus 以自定义格式将时间序列存储在内存及本地磁盘，缩放通过分片和联合实现。自 v2 以后，Prometheus 实现了类似于 LSM 数据库的 Block、WAL、Compaction 等结构，极大避免随机读、随机写，加快读写速率。</li><li><strong>部署操作简单：</strong> Prometheus 用 Go 编写，每台服务器仅依赖本地存储，独立于可靠且易于部署。</li><li><strong>告警系统精确：</strong> Prometheus 的警报是依据 PromQL 定义，alertManager 处理来处理是否告警。</li><li><strong>多客户端支持：</strong> Prometheus 支持十多种语言客户端库，允许轻量化检测服务，自定义库易于实现。</li><li><strong>三方集成众多：</strong> Prometheus 可以轻松连接第三方 exporter 数据。如：系统信息、Docker、HAProxy、JMX 等指标。TiDB 监控系统中就引用了 Node_exporter、Blackbox_exporter 等三方开源 exporter 监控操作系统、网络运行情况。</li></ol><h2 id="二、prometheus-逻辑结构" tabindex="-1">二、prometheus 逻辑结构 <a class="header-anchor" href="#二、prometheus-逻辑结构" aria-label="Permalink to &quot;二、prometheus 逻辑结构&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Time Series Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Data Schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">idnetifier -&gt; (t0, v0),(t1, v1),(t3, v3)...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Prometheus Data Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;metric name{&lt;label name&gt;=&lt;label value&gt;, ...}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Typical set of identifiers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span></span></code></pre></div><table tabindex="0"><thead><tr><th>Merics Name</th><th>Labels</th><th>Timestamp</th><th>Sample Value</th></tr></thead><tbody><tr><td>{<strong>name</strong>}=&quot;&quot;</td><td></td><td>@143417561287</td><td>94934</td></tr><tr><td>{<strong>name</strong>}=&quot;&quot;</td><td></td><td>@143417561287</td><td>94934</td></tr><tr><td>{<strong>name</strong>}=&quot;&quot;</td><td></td><td>@143417561287</td><td>94934</td></tr></tbody></table><figure><img src="`+n+`" alt="Prometheus01" tabindex="0"><figcaption>Prometheus01</figcaption></figure><p>        Prometheus Metric 配合 Label 会分拆成有限个指标，反映成二维平面上的点，在运算时通过取 <code>交集</code> 或 <code>并集</code> 实现 Metric 的聚合。每个指标点随时间的增加指标值的变化情况会保存在一个文件中，实现了并行读、写极大，提高了性能。</p><h2 id="三、prometheus-时间过滤" tabindex="-1">三、prometheus 时间过滤 <a class="header-anchor" href="#三、prometheus-时间过滤" aria-label="Permalink to &quot;三、prometheus 时间过滤&quot;">​</a></h2><p>瞬时向量过滤器 : 指定时间戳内,选择一组标签的时间序列和对应的单个样本值；</p><p>如：<code>tidb_server_handle_query_duration_seconds_bucket{tidb_cluster=&quot;$tidb_cluster&quot;,type=&quot;select&quot;}</code> ，表示 TiDB 中 tidb_server_handle_query_duration_seconds 指标在 <code>tidb_cluster</code> 和 <code>type</code> 的标签组合下， 获取当前时间的瞬时样本值。</p><p>区间向量过滤器 : 通过 <code>[]</code> 定义指标时间范围，获取 <code>瞬时向量过滤器</code> 所有时间范围内该指标的单个样本值； 如：<code>tidb_server_handle_query_duration_seconds_bucket{tidb_cluster=&quot;$tidb_cluster&quot;,type=&quot;select&quot;}</code> ，表示 TIDB 中 tidb_server_handle_query_duration_seconds_bucket 指标在时间范围内的所有值。</p><p>时间位移操作 : 通过 <code>offset</code> 指定自当前时刻起向后偏移的时长； 如：<code>tidb_server_handle_query_duration_seconds_bucket offset 5m</code> ，表示 TIDB 中 tidb_server_handle_query_duration_seconds_bucket 指标 5 min 之前那个时刻的瞬时值。</p><h2 id="四、prometheus-聚合操作" tabindex="-1">四、prometheus 聚合操作 <a class="header-anchor" href="#四、prometheus-聚合操作" aria-label="Permalink to &quot;四、prometheus 聚合操作&quot;">​</a></h2><p>        以由 Label 为 instance、job、le、sql_type 组合构成的 tidb_server_handle_query_duration_seconds_bucket Metric 为例；</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    name</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;tidb_server_handle_query_duration_seconds_bucket&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">,</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> #</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> Metric</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">__name__</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    instance</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;172.16.6.155:10080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                           </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">instance</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    job</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tidb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                                              </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">job</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    le</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;+Inf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                                               </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">le</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    sql_type</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Select&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">                                        #</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> Label</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> :</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> sql_type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>        假设取 tidb_server_handle_query_duration_seconds_bucket { instance = &quot;172.16.6.155:10080&quot; , sql_type = &quot;Select&quot; , le = &quot;+Inf&quot; } [2m] 的瞬时值。第一步，从 prometheus 存储中截取对应时段的数据后对数据结果倒排重构。第二步，取各文件结果交集得出 Metric 在 2min 内的所有值。         <strong>注意：</strong> 第一步倒排的目的是为了实现，在有序数组下的快速归并查找，是基于性能层面考虑的操作。</p><figure><img src="`+h+'" alt="Prometheus02" tabindex="0"><figcaption>Prometheus02</figcaption></figure><p>        在 Prometheus Dashboard 中汇聚结果，如下图所示。</p><figure><img src="'+l+'" alt="Prometheus03" tabindex="0"><figcaption>Prometheus03</figcaption></figure><h2 id="五、prometheus-指标类型" tabindex="-1">五、prometheus 指标类型 <a class="header-anchor" href="#五、prometheus-指标类型" aria-label="Permalink to &quot;五、prometheus 指标类型&quot;">​</a></h2><p>        依据 <a href="https://prometheus.fuckcloudnative.io/di-er-zhang-gai-nian/metric_types" target="_blank" rel="noreferrer">promehteus 官网介绍</a> 指标类型仅存在于 client 端，在 server 端不区分指标类型，均视为无序时序数据。那么为什么要区分不同指标类型呢？ --&gt; &quot;待解释&quot;         TiDB 中封装 Prometheus 后，数据流转如下图所示；                 <img src="'+p+`" alt="Prometheus04"></p><h3 id="_5-1-counter" tabindex="-1">5.1 Counter <a class="header-anchor" href="#_5-1-counter" aria-label="Permalink to &quot;5.1 Counter&quot;">​</a></h3><p>        Counter 类型表示样本数据单调递增，即只增不减，除非监控系统发生了重置。例如：sql statement operation per second。</p><h3 id="_5-2-gauge" tabindex="-1">5.2 Gauge <a class="header-anchor" href="#_5-2-gauge" aria-label="Permalink to &quot;5.2 Gauge&quot;">​</a></h3><p>        Gauge 类型表示样本数据可以任意变化的指标，即可增可减。例如：tikv region 的数量；</p><h3 id="_5-3-histogram" tabindex="-1">5.3 Histogram <a class="header-anchor" href="#_5-3-histogram" aria-label="Permalink to &quot;5.3 Histogram&quot;">​</a></h3><p>        Histogram 类型在一段时间范围内对数据进行采样，将其记入自定义配置的 bucket 中，后续可通过制定区间对筛选数据、统计样本数量，最后呈现出直方图的表现形式。</p><h3 id="_5-4-summary" tabindex="-1">5.4 Summary <a class="header-anchor" href="#_5-4-summary" aria-label="Permalink to &quot;5.4 Summary&quot;">​</a></h3><p>        Summary 与 Histogram 的功能类似，表示一段时间内的数据样本结果，区别体现在计算分位数时 summary 直接基于 client 端存储的样本数据计算出百分位结果值，待 prometheus 定期 pull 数据时<strong>存储百分位结果值</strong>。而 Histogram 则是将<strong>存储的样本数据</strong>存储到 prometheus 中。</p><p>        <strong>注意</strong>：根据 Breezewish 在 <a href="https://pingcap.com/zh/blog/tikv-source-code-reading-3" target="_blank" rel="noreferrer">TiKV 源码解析系列文章（三）Prometheus（上）</a> 中介绍的 <strong>“rust-prometheus 库目前还只实现了前三种。TiKV 大部分指标都是 Counter 和 Histogram，少部分是 Gauge”</strong> ，可以发现 rust prometheus client 并没有实现 summary 类型，并且在 tikv 中主要是用其他三种类型。Summary 类型在 <a href="https://docs.rs/prometheus/latest/prometheus/proto/enum.MetricType.html?search=summary#variant.SUMMARY" target="_blank" rel="noreferrer">rust prometheus client doc</a> 只有对应的 protocol type 定义，而没有对应的 struct 实现。</p><h2 id="六、prometheus-聚合函数" tabindex="-1">六、prometheus 聚合函数 <a class="header-anchor" href="#六、prometheus-聚合函数" aria-label="Permalink to &quot;六、prometheus 聚合函数&quot;">​</a></h2><h3 id="_6-1-rate" tabindex="-1">6.1 Rate <a class="header-anchor" href="#_6-1-rate" aria-label="Permalink to &quot;6.1 Rate&quot;">​</a></h3><p>        从代码看 <a href="https://github.com/prometheus/prometheus/blob/9fcf0b3d46cc3cdff96e6e7baabfaf63d89a5a9d/promql/functions.go#L134-L146" target="_blank" rel="noreferrer">Rate</a> 函数内部调用 <a href="https://github.com/prometheus/prometheus/blob/9fcf0b3d46cc3cdff96e6e7baabfaf63d89a5a9d/promql/functions.go#L59" target="_blank" rel="noreferrer">extrapolatedRate</a> 计算，经过简化后代码如下；</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> extrapolatedRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Expressions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">enh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EvalNodeHelper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">isCounter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">isRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MatrixSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ms.VectorSelector.(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VectorSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  samples    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vals[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]                                        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 样本监控数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rangeStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enh.Ts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> durationMilliseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ms.Range</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vs.Offset)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 样本开始时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rangeEnd   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enh.Ts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> durationMilliseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vs.Offset)                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 样本终止时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    resultValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> samples.Points[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(samples.Points)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> samples.Points[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].V</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 终止时间样本数据减开始时间样本数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isCounter {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                                   // Counter 类型会循环时间区间内数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _, sample </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> samples.Points {                                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ，如果下一个值比上一个值大，说明发</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sample.V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastValue {                                           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生了计数器重置，如: 进程 crash 数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    resultValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastValue                                        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 据丢失，会补上 crash 后面的增量。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   lastValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sample.V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 样本开始时间点持续的时间到，当前时间前推后的时间距离，如: 指标 X[1m] 为 X 前推 1min，当前时间 02:03:02 ，那么前推结果为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 02:02:02，也就是取 02:02:02 --&gt; 02:03:02 区间内的所有数据。假设指标每 15s 采一次，即: 采集时间点为 [02:02:16、02:0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2:31、02:02:46、02:03:01];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 那么 durationToStart 为 02:02:16 - 02:02:02 = 00:00:14;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 同理 durationToEnd   为 02:03:02 - 02:03:01 = 00:00:01;    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    durationToStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(samples.Points[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rangeStart) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> durationToEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rangeEnd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">samples.Points[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(samples.Points)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].T) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                     </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // sampledInterval 表示样本数据的第一个点和最后一个点间的时间间隔;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampledInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(samples.Points[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(samples.Points)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">samples.Points[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].T) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // averageDurationBetweenSamples 表示样本数据在区间内每个点的时间间隔，默认是 15s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> averageDurationBetweenSamples </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampledInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(samples.Points)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isCounter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resultValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> samples.Points[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Counter 指标类型时，用斜率公式 “零点时间/区间时间 = 开始时间样本值/结束时间到开始时间样本增量” 算出 推断的外延时间点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        durationToZero </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampledInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (samples.Points[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resultValue)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果 durationToZero 低于 durationToStart，选取计时器重置的时间点到第一个采样时间点的时间区间作为 durationToStart</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> durationToZero </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> durationToStart {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            durationToStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> durationToZero</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extrapolationThreshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> averageDurationBetweenSamples </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> extrapolateToInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampledInterval</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 推断功能主要解决，最后一个采样点发生时间到查询时间存在一定距离，即：查询的是 02:03:02 的结果，但 prometheus 最后一次拉数据为 02:03:01</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 因为设定了一个阈值 extrapolationThreshold，如果超过进行一定追加，达到延长时间采样点至查询目地时间的目的；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 最后，通过公式 “推断结果/真实结果 = 推断样本时间/真实样本时间” 解出 “查询时间，如 02:03:02 的推断结果”；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 代码为 resultValue = resultValue * (extrapolateToInterval / sampledInterval)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> durationToStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> extrapolationThreshold {                   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extrapolateToInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> durationToStart                    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extrapolateToInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> averageDurationBetweenSamples </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> durationToEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> extrapolationThreshold {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extrapolateToInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> durationToEnd                      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extrapolateToInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> averageDurationBetweenSamples </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resultValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resultValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (extrapolateToInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampledInterval) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isRate {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resultValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resultValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ms.Range.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Seconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()             </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(enh.Out, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Point: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{V: resultValue},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>         函数意义：计算区间指标时间窗口内平均增长速率。</p><p>        从代码看 <a href="https://github.com/prometheus/prometheus/blob/9fcf0b3d46cc3cdff96e6e7baabfaf63d89a5a9d/promql/functions.go#L139" target="_blank" rel="noreferrer">funcRate</a> 调用返回 <code>extrapolatedRate(vals, args, enh, true, true)</code>。依据上文解读，会返回样本区间内 (最大值-最小值)/时间区间的结果，因为 counter 或 histogram(内部封装了 counter) 是累计值，意味着随时间增长监控指标始终增长。通过计算采样时间的增量代表采样时间内的指标值，再除以时间得出 “每秒指标的增长”，经过推断计算出查询时间点的平均增长率。</p><h3 id="_6-2-increase" tabindex="-1">6.2 increase <a class="header-anchor" href="#_6-2-increase" aria-label="Permalink to &quot;6.2 increase&quot;">​</a></h3><p>        函数意义：样本采集区间内，指标样本的第一个值和最后一个值之间的增长量。</p><p>        从代码看 <a href="https://github.com/prometheus/prometheus/blob/9fcf0b3d46cc3cdff96e6e7baabfaf63d89a5a9d/promql/functions.go#L144" target="_blank" rel="noreferrer">funcIncrease</a> <code>extrapolatedRate(vals, args, enh, true, false)</code>。依据上文解读，会返回样本区间 (最大值-最小值) 的结果，同理因为 Counter 是累计值，代表样本增量，经过推断计算出查询时间点的样本增量。</p><h3 id="_6-3-delta" tabindex="-1">6.3 delta <a class="header-anchor" href="#_6-3-delta" aria-label="Permalink to &quot;6.3 delta&quot;">​</a></h3><p>        函数意义：计算样本区间内，指标的第一个元素和最后一个元素的差值。</p><p>        从代码看 <a href="https://github.com/prometheus/prometheus/blob/9fcf0b3d46cc3cdff96e6e7baabfaf63d89a5a9d/promql/functions.go#L134" target="_blank" rel="noreferrer">funcDelta</a> <code>extrapolatedRate(vals, args, enh, false, false)</code>。其实本质上功能与 increase 函数类似，只是少了计数器重置方面的考量。</p><p>        由于这个值被外推到指定的整个时间范围，所以即使样本值都是整数，你仍然可能会得到一个非整数值。</p><h3 id="_6-4-irate" tabindex="-1">6.4 irate <a class="header-anchor" href="#_6-4-irate" aria-label="Permalink to &quot;6.4 irate&quot;">​</a></h3><p>        函数意义：样本采集区间内，指标样本的最后一个值和倒数第二个值之间的增长量。</p><p>        从代码看 <a href="https://github.com/prometheus/prometheus/blob/87ffac3e9d2104cd368d2e8962723d9fc3ee126f/promql/functions.go#L149" target="_blank" rel="noreferrer">funcIrate</a> <code>instantValue(vals, enh.Out, true)</code>。函数内部调用 <a href="https://github.com/prometheus/prometheus/blob/87ffac3e9d2104cd368d2e8962723d9fc3ee126f/promql/functions.go#L158" target="_blank" rel="noreferrer">instantValue</a></p><h3 id="_6-5-histogram-quantile" tabindex="-1">6.5 histogram_quantile <a class="header-anchor" href="#_6-5-histogram-quantile" aria-label="Permalink to &quot;6.5 histogram_quantile&quot;">​</a></h3><p>对于 histogram ，取 <code>rate + []</code> 表示时间区间内指标的平均增量，</p><h2 id="七、tidb-duration-聚合解读" tabindex="-1">七、TiDB Duration 聚合解读 <a class="header-anchor" href="#七、tidb-duration-聚合解读" aria-label="Permalink to &quot;七、TiDB Duration 聚合解读&quot;">​</a></h2><h3 id="_7-1-获取定义" tabindex="-1">7.1 获取定义 <a class="header-anchor" href="#_7-1-获取定义" aria-label="Permalink to &quot;7.1 获取定义&quot;">​</a></h3><p>        在 Grafana 可发现 Duration 999 线的定义，如下代码块。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">histogram_quantile(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rate(tidb_server_handle_query_duration_seconds_bucket{k8s_cluster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$k8s_cluster&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tidb_cluster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$tidb_cluster&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}[1m])) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (le))</span></span></code></pre></div><figure><img src="`+k+'" alt="Prometheus05" tabindex="0"><figcaption>Prometheus05</figcaption></figure><p>        至于 {k8s_cluster=&quot;$k8s_cluster&quot;, tidb_cluster=&quot;$tidb_cluster&quot;} 标签过滤可以暂时忽略，他是通过 Grafana 变量机制实现的过滤 TiDB Cluster 相关指标的机制。这里主要关注 Prometheus 如果实现数据的聚合，暂时忽略多集群数据的问题。对该问题，详情参考 <a href="https://www.mianshigee.com/tutorial/prometheus-book/grafana-templating.md" target="_blank" rel="noreferrer">grafana 变量机制</a> 深入研究。</p><figure><img src="'+r+`" alt="Prometheus06" tabindex="0"><figcaption>Prometheus06</figcaption></figure><h3 id="_7-2-metric-区间" tabindex="-1">7.2 Metric 区间 <a class="header-anchor" href="#_7-2-metric-区间" aria-label="Permalink to &quot;7.2 Metric 区间&quot;">​</a></h3><p>        经过简化如下所示，下面开始 <strong>“真正”</strong> 进入聚合过程分析。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tidb_server_handle_query_duration_seconds_bucket[1m]</span></span></code></pre></div><p>        集合过程中，最内层先对指标 tidb_server_handle_query_duration_seconds_bucket 通过 <strong>“区间向量过滤器”</strong> 过滤出 1min 内该指标的所有数据。经过时间戳转译结果,如下代码块所示。         从真实世界时间看，每行数据与上一行相比刚好增加 15s，因为在 TiDB 中默认配置每隔 15s prometheus 从 TiDB、TiKV、PD 中拉取缓存的数据。 4 * 15 = 60s 刚好代表 1min 内所有的数据。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            131 @ 1650531198.144           131 @ 2022-04-21 16:53:18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            131 @ 1650531213.144   ----&gt;   131 @ 2022-04-21 16:53:33      增加 15s</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            131 @ 1650531228.144   ----&gt;   131 @ 2022-04-21 16:53:48      增加 15s</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            131 @ 1650531243.144           131 @ 2022-04-21 16:54:03      增加 15s</span></span></code></pre></div><figure><img src="`+o+'" alt="Prometheus07" tabindex="0"><figcaption>Prometheus07</figcaption></figure><h3 id="_7-3-rete-运算" tabindex="-1">7.3 Rete 运算 <a class="header-anchor" href="#_7-3-rete-运算" aria-label="Permalink to &quot;7.3 Rete 运算&quot;">​</a></h3><p>        进入第二层运算，如下代码块所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rate(tidb_server_handle_query_duration_seconds_bucket[1m])</span></span></code></pre></div><p>        rate 函数表示数据点做差，函数原理参考上文。结果显示 1min 内标签为 {instance=&quot;172.16.6.155:10080&quot;, job=&quot;tidb&quot;, le=&quot;+Inf&quot;, sql_type=&quot;Begin&quot;} 的指标聚合结果的增量为 0，又因为 prometheus 中保存的是累计值，在 rate 做差后，刚好表示这 1min 内符合 Lable 的指标聚合的增量。</p><figure><img src="'+d+'" alt="Prometheus08" tabindex="0"><figcaption>Prometheus08</figcaption></figure><h3 id="_7-4-sum-运算" tabindex="-1">7.4 Sum 运算 <a class="header-anchor" href="#_7-4-sum-运算" aria-label="Permalink to &quot;7.4 Sum 运算&quot;">​</a></h3><p>        进入第三层运算，如下代码块所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rate(tidb_server_handle_query_duration_seconds_bucket[1m])) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (le)</span></span></code></pre></div><p>        <code>sum( Metric_XXX ) by (le)</code> 运算目的是为了，聚合除 le 标签外的所有其他指标结果，也就是屏蔽 sql_type、job、instance 的 Label 差异，结果如下：</p><figure><img src="'+E+'" alt="Prometheus09" tabindex="0"><figcaption>Prometheus09</figcaption></figure><h3 id="_7-5-histogram-quantile-运算" tabindex="-1">7.5 Histogram_quantile 运算 <a class="header-anchor" href="#_7-5-histogram-quantile-运算" aria-label="Permalink to &quot;7.5 Histogram_quantile 运算&quot;">​</a></h3><p>        进入第四层运算，如下代码块所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">histogram_quantile(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rate(tidb_server_handle_query_duration_seconds_bucket[1m])) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (le))</span></span></code></pre></div><p>        首先，基于所有 le 做 sort，le 表示每个 bucket 的上边界，下边界由 别的 le 决定。首先判定第 99.9% 个数载哪个 bucket 区间，在用二元一次方程推断出该区间的第 99.9% 的数值。</p><h2 id="八、reference" tabindex="-1">八、Reference <a class="header-anchor" href="#八、reference" aria-label="Permalink to &quot;八、Reference&quot;">​</a></h2><p><a href="https://www.bilibili.com/video/BV1a64y1X7ys?from=search&amp;seid=16358382673192401481&amp;spm_id_from=333.337.0.0" target="_blank" rel="noreferrer">Prometheus 是怎么存储数据的（陈皓）</a><a href="https://prometheus.fuckcloudnative.io/di-er-zhang-gai-nian/metric_types" target="_blank" rel="noreferrer">Prometheus 指标类型</a><br><a href="https://zhuanlan.zhihu.com/p/348863302" target="_blank" rel="noreferrer">prometheus两种分位值histogram和summary对比histogram线性插值法原理</a><br><a href="https://www.infoq.cn/article/Prometheus-theory-source-code" target="_blank" rel="noreferrer">Prometheus 原理和源码分析</a><br><a href="https://www.bianchengquan.com/article/559917.html" target="_blank" rel="noreferrer">Prometheus原理和源码分析</a></p>',80)]))}const _=i(g,[["render",c]]);export{D as __pageData,_ as default};
