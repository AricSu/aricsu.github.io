import{_ as i,c as a,o as l,a5 as n}from"./chunks/framework.JWlnoUZ4.js";const g=JSON.parse('{"title":"TiDB-TLS加密传输安全协议原理与应用","description":"TiDB-TLS加密传输安全协议原理与应用","frontmatter":{"title":"TiDB-TLS加密传输安全协议原理与应用","description":"TiDB-TLS加密传输安全协议原理与应用"},"headers":[],"relativePath":"zh/work/tidb/03TiDB-运维管理/3-1TiDB 监控详解/01TLS 原理与应用.md","filePath":"zh/work/tidb/03TiDB-运维管理/3-1TiDB 监控详解/01TLS 原理与应用.md"}'),h={name:"zh/work/tidb/03TiDB-运维管理/3-1TiDB 监控详解/01TLS 原理与应用.md"};function t(e,s,p,k,r,F){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="tidb-tls加密传输安全协议原理与应用" tabindex="-1">TiDB-TLS加密传输安全协议原理与应用 <a class="header-anchor" href="#tidb-tls加密传输安全协议原理与应用" aria-label="Permalink to &quot;TiDB-TLS加密传输安全协议原理与应用&quot;">​</a></h1><p>时间：2021-01-15</p><ul><li>TLS (Transport Layer Security) 安全传输层协议是构建应用 TCP/IP 四层协议于应用层的传输协议，保证网络协议之间传输信息的安全性</li></ul><figure><img src="https://img2018.cnblogs.com/blog/1769223/201910/1769223-20191019181046559-603567130.png" alt="TLS" tabindex="0"><figcaption>TLS</figcaption></figure><h2 id="非对称加密" tabindex="-1">非对称加密 <a class="header-anchor" href="#非对称加密" aria-label="Permalink to &quot;非对称加密&quot;">​</a></h2><ul><li><p>非对称加密通过公私钥实现</p><ul><li>公私钥关系：使用非对称密码算法可以生成公私钥； <ul><li>公钥加密的的内容私钥可以解密，私钥加密的内容公钥可以解密；</li><li>通过私钥计算得到公钥，但是通过公钥得不到私钥，因此通常情况是将公钥公开；</li></ul></li></ul></li><li><p>非对称密码算法TLS两种使用场景</p><ul><li>加解密；加解密用法用于TLS协议中的用户认证和对称加密算法协商，A用B的公钥加密传给B，只有B能用自己的私钥解密得到明文；</li><li>数字签名：假如A使用自己的私钥加密数据，B得到这部分数据后，使用A的公钥进行解密得到明文，将明文和原始数据比对，发现一致，则可以证明是A使用自己的私钥签名的；</li></ul></li></ul><h2 id="数字证书" tabindex="-1">数字证书 <a class="header-anchor" href="#数字证书" aria-label="Permalink to &quot;数字证书&quot;">​</a></h2><ul><li><p>数字证书的作用</p><ul><li>证书中的数字签名可以验证是否拥有某一端（用户）公钥的私钥</li></ul></li><li><p>数字证书的构成</p><ul><li>证书是包含若干字段的文件</li><li>证书中一般包含公钥、用户信息.....等</li></ul></li><li><p>数字证书的特性</p><ul><li>数字证书可以签发数字证书（如：将证书A签发（加密）为证书B） <ul><li>Person1对证书A全部内容做hash，使用密钥对hash值加密得到证书B</li><li>Persion2可以使用Persion1的公钥解密验证证书签发者是否为Persion1</li></ul></li><li>根证书是特殊的证书，没有签发者，是绝对可信的证书</li></ul></li><li><p>x.509 证书标准：数字认证证书有很多标准，x.509 就是比较通用的其中一种</p></li><li><p>x.509 证书内容</p><ul><li>version： # 版本号</li><li>Serial Number: # 序列号</li><li>Signature Algorithm： # 加密算法</li><li>Validity: # 有效期</li><li>Subject: # 证书拥有者信息</li><li>Subject Public Key Info: # 证书拥有者公钥信息</li><li>Signature Algorithm: # 对证书正文取hash后，使用公钥加密的结果</li></ul></li></ul><h2 id="tls协议" tabindex="-1">TLS协议 <a class="header-anchor" href="#tls协议" aria-label="Permalink to &quot;TLS协议&quot;">​</a></h2><ul><li><p>TLS协议使用对称加密和非对称加密通讯</p><ul><li>用非对称加密确保获取的信息是可信客户端发来的信息</li><li>用对称加密保证传出过程中被加密的信息在不知道加密算法的情况下无法被破解</li></ul></li><li><p>证书签发过程</p></li></ul><ol><li>生成客户端的密钥，即客户端的公私钥对，且要保证私钥只有客户端自己拥有。</li><li>以客户端的公钥和客户端自身的信息(国家、机构、域名、邮箱等)为输入，生成证书请求文件 <ul><li>其中客户端的公钥和客户端信息是明文保存在证书请求文件中的</li><li>客户端私钥的作用是对客户端公钥及客户端信息做签名，自身是不包含在证书请求中的</li><li>然后把证书请求文件发送给 CA 机构，CA 使用私钥签发加密生成客户端证书来表明用户的身份 <ul><li>CA机构接收到客户端的证书请求文件后，首先校验其签名</li><li>然后审核客户端的信息</li><li>最后CA机构使用自己的私钥为证书请求文件签名，生成证书文件，下发给客户端</li></ul></li></ul></li></ol><ul><li>具体通信过程</li></ul><ol><li>客户端向服务器 443 端口请求协定以后通讯的加密算法 <ul><li>CA 使用私钥加密服务器端的公钥、域名、公钥摘要生成密文（公钥、域名、公钥摘要=&gt;密文）</li></ul></li><li>服务端收到客户端请求后，使用服务端私钥加密选中的通讯加密算法和 CA 证书得到的密文发送给客户端 <ul><li>在 CA 加密后的密文上使用标注 CA 证书的签发者，发送给客户端端（密文 + CA 签发者名=&gt;发往客户端端消息）</li><li>客户端通过密文上标注的 CA 签发者，找到对应内置在客户端电脑中的公钥（此时如果中间拦截者，只能查看但是无法伪造内容给客户端，因为拦截者没有 CA 机构的私钥，只能使用公钥解密查看）</li></ul></li><li>客户端使用协定的对称加密算法加密信息得到密文向服务器 80/3306 端口发送请求 <ul><li>使用公钥破解获取的密文，得到服务器端的公钥、域名、公钥摘要（CA 私钥 + 密文=&gt;公钥、域名、公钥摘要）</li></ul></li><li>客户端得到服务器端返回密文后，使用协定的对称加密算法解密从服务器得到的密文，一致通信下去</li></ol><figure><img src="http://cdn.lifemini.cn/dbblog/20210115/fdf2c3ef163940d6a3b4d9103ca0575b.png" alt="SSLTLS 传输协议原理.png" tabindex="0"><figcaption>SSLTLS 传输协议原理.png</figcaption></figure><h2 id="tidb使用" tabindex="-1">TiDB使用 <a class="header-anchor" href="#tidb使用" aria-label="Permalink to &quot;TiDB使用&quot;">​</a></h2><h3 id="制作ca密钥和ca证书" tabindex="-1">制作CA密钥和CA证书 <a class="header-anchor" href="#制作ca密钥和ca证书" aria-label="Permalink to &quot;制作CA密钥和CA证书&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装openssl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 RSA 算法生成 2048 位 CA 私钥保存在 ca-key.pem</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 虽然 server-key.pem 文件的头尾都标注着“RSA PRIVATE KEY”，实际文件中包括了公钥和私钥,公钥和私钥总是成对儿出现</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> genrsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca-key.pem</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于 X509 标准使用 CA 密钥生成对应的 CA 证书保存在 ca-cert.pem</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 因为 ca-key.pem 是自签名的 CA 身份证，所以上面步骤中没有生成身份证申请文件（CSR）的过程，直接输出了 CA 证书</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca-cert.pem</span></span></code></pre></div><h3 id="制作服务端密钥和证书" tabindex="-1">制作服务端密钥和证书 <a class="header-anchor" href="#制作服务端密钥和证书" aria-label="Permalink to &quot;制作服务端密钥和证书&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 RSA 算法生成 2048 位，有效期 365000 天的服务器端证书请求文件、服务器端未加密私钥 server-key.pem  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 服务器端公钥和服务器端信息保存在证书请求文件 server-req.pem 中，服务器端公钥是从 server-key.pem 里提取出来的  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-req.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-key.pem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于服务器端公私钥对 server-key.pem，使用 RSA 算法生成服务器端 RSA 私钥保存在 server-key.pem</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-key.pem</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于 X509 标准使用 CA 私钥对服务器端证书请求文件 server-req.pem 加密，生成有效期365000天，序列号位 01 的服务端证书</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CA 机构首先校验签名，然后审核客户端的信息，最后使用 CA 私钥为证书请求文件签名，生成服务端证书文件 server-cert.pem</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-req.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -CA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca-cert.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -CAkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -set_serial</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 01</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-cert.pem</span></span></code></pre></div><p>生成了服务器证书、服务器端私钥、服务器端公钥、通过CA私钥签发服务器端证书</p><h3 id="制作客户端密钥和证书" tabindex="-1">制作客户端密钥和证书 <a class="header-anchor" href="#制作客户端密钥和证书" aria-label="Permalink to &quot;制作客户端密钥和证书&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 RSA 算法生成 2048 位，有效期365000天的客户端密钥、客户端证书请求文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-req.pem</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于客户端密钥使用 RSA 算法进行再加密，生成客户端 RSA 私钥</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-key.pem</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于 X509 标准使用客户端证书请求文件和 CA 私钥生成有效期365000天，序列号位01的客户端证书</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-req.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -CA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca-cert.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -CAkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -set_serial</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 01</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-cert.pem</span></span></code></pre></div><h3 id="验证服务端和客户端证书" tabindex="-1">验证服务端和客户端证书 <a class="header-anchor" href="#验证服务端和客户端证书" aria-label="Permalink to &quot;验证服务端和客户端证书&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成服务端和客户端证书之后，通过CA证书验证服务端证书、客户端证书</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[tidb@tiup-tidb41 CA]$ openssl verify -CAfile ca-cert.pem server-cert.pem client-cert.pem</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server-cert.pem:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">client-cert.pem:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span></code></pre></div><p>生成了客户端证书、客户端私钥、客户端公钥、通过CA私钥签发含有客户端证书的客户端证书</p><p>配置 TiDB 启用证书验证</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">security</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ssl-cert =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/server-cert.pem&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ssl-key =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/server-key.pem&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ssl-ca=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/ca-cert.pem&quot;</span></span></code></pre></div><p>验证 TLS 安全配置生效</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[tidb@tiup-tidb41 log]$ tail -20 tidb.log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2021/01/15 09:30:13.356 -05:00] [INFO] [server.go:226] [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mysql protocol server secure connection is enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;client verification enabled&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[tidb@tiup-tidb44 CA]$ mysql -uroot -h192.168.169.41 -P4000 --ssl-cert /home/tidb/CA/client-cert.pem --ssl-key /home/tidb/CA/client-key.pem --ssl-ca /home/tidb/CA/ca-cert.pem</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Welcome</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MySQL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> monitor.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Commands</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> end</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MySQL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connection</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 5.7.25-TiDB-v4.0.9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TiDB</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Apache </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">License</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) Community Edition, MySQL 5.7 compatible</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Copyright</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Oracle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registered</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trademark</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Oracle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Corporation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and/or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> its</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">affiliates.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Other</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> names</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> may</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trademarks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> their</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> respective</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">owners.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;help;&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\h&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\c&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clear</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> statement.</span></span></code></pre></div><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ol><li><a href="https://blog.csdn.net/liitdar/article/details/80755073" target="_blank" rel="noreferrer">liitdar的文章：https://blog.csdn.net/liitdar/article/details/80755073</a></li><li><a href="https://www.cnblogs.com/struggle-1216/p/11704726.html" target="_blank" rel="noreferrer">一叶知秋的文章：https://www.cnblogs.com/struggle-1216/p/11704726.html</a></li></ol>`,31)]))}const C=i(h,[["render",t]]);export{g as __pageData,C as default};
